import{_ as t,c as e,o,a}from"./app.a496e31a.js";const h=JSON.parse('{"title":"SVG动画概览","description":"","frontmatter":{"title":"SVG动画概览"},"headers":[{"level":2,"title":"1️⃣ ⭐ SVG动画概览","slug":"_1️⃣-⭐-svg动画概览","link":"#_1️⃣-⭐-svg动画概览","children":[]},{"level":2,"title":"2️⃣ 为什么使用SVG动画？","slug":"_2️⃣-为什么使用svg动画","link":"#_2️⃣-为什么使用svg动画","children":[]},{"level":2,"title":"3️⃣ 浏览器兼容性","slug":"_3️⃣-浏览器兼容性","link":"#_3️⃣-浏览器兼容性","children":[]}],"relativePath":"svg/animation/svg-animation-overview.md","lastUpdated":1673434777000}'),i={name:"svg/animation/svg-animation-overview.md"},n=a('<p>这是 <a href="https://css-tricks.com/guide-svg-animations-smil/#aa-overview" target="_blank" rel="noreferrer">A Guide to SVG Animations (SMIL)</a> 的部分内容。</p><h2 id="_1️⃣-⭐-svg动画概览" tabindex="-1">1️⃣ ⭐ SVG动画概览 <a class="header-anchor" href="#_1️⃣-⭐-svg动画概览" aria-hidden="true">#</a></h2><p>SVG图形可以使用 <strong>动画元素（<code>animation elements</code>）</strong> 进行动画。动画元素一开始定义在 <a href="http://www.w3.org/TR/2001/REC-smil-animation-20010904/" target="_blank" rel="noreferrer">SMIL</a> 动画规范中，包含以下元素：</p><ol><li><code>&lt;animate&gt;&lt;/animate&gt;</code> - 允许你在一段时间内对标量特性（<code>attributes</code>）和属性（<code>properties</code>）进行动画</li><li><code>&lt;set&gt;&lt;/set&gt;</code> - <code>animate</code> 的简写方式，对非数字类型的特性和属性添加动画值有用，比如 <code>visibility</code> 属性</li><li><code>&lt;animateMotion&gt;&lt;/animateMotion&gt;</code> - 用于沿着运动路径（<code>motion path</code>）移动元素⚡，路径动画的关键</li><li><code>&lt;animateColor&gt;&lt;/animateColor&gt;</code> - 它随着时间的推移修改特定特性或属性的颜色值，已废弃🚨，使用 <code>&lt;animate&gt;</code> 元素替代</li></ol><p>除了SMIL规范中的动画元素外，SVG还提供了兼容SMIL规范的扩展；这些扩展包括扩展了元素功能的特性和其它动画元素😎：</p><ol><li><code>&lt;animateTransform&gt;&lt;/animateTransform&gt;</code> - 允许你对SVG transformation特性进行动画，比如 <code>transform</code> 特性</li><li><code>path (attribute)</code> - 允许任何SVG <code>path</code> 数据（即 <code>d</code> 特性）放置到 <code>&lt;animateMotion&gt;</code> 元素的 <code>path</code> 特性上进行动画（SMIL只支持SVG路径数据语法的子集）；我们将之后再讲到 <code>&lt;animateMotion&gt;</code></li><li><code>&lt;mpath&gt;&lt;/mpath&gt;</code> - 放在 <code>&lt;animateMotion&gt;</code> 元素内部，引用要运动的路径；<code>&lt;animateMotion&gt;&lt;mpath xlink:href=&quot;#motionPath&quot;&gt;&lt;/mpath&gt;&lt;/animateMotion&gt;</code></li><li><code>keypoints (attribute)</code> - 它是 <code>&lt;animateMotion&gt;</code> 的一个特性（<code>&lt;animateMotion keypoints=&quot;xxx&quot;&gt;</code>）， 用于对动画路径运动速度提供精确的控制</li><li><code>rotate (attribute)</code> - 它是 <code>&lt;animateMotion&gt;</code> 的一个特性（<code>&lt;animateMotion rotate=&quot;xxx&quot;&gt;</code>），用于控制目标对象是否自动旋转，以便其x轴始终指向与运动路径 <code>正切</code> 的相同或相反的方向，达到想要的动画效果；它是路径动画关键的一个属性⚡</li></ol><p>SVG动画在本质上可以类似于CSS动画和transitions。创建keyframes，物体移动，颜色改变等等。但是，它们能做一些CSS无法做到的事情，后面会讲到这个😎。</p><h2 id="_2️⃣-为什么使用svg动画" tabindex="-1">2️⃣ 为什么使用SVG动画？ <a class="header-anchor" href="#_2️⃣-为什么使用svg动画" aria-hidden="true">#</a></h2><p>📚 SVG可以使用CSS添加样式，以及使用CSS动画：</p><ul><li><a href="http://slides.com/sarasoueidan/styling-animating-svgs-with-css--2#/" target="_blank" rel="noreferrer">Styling animating svgs with CSS - slides</a></li></ul><p>基本上任何可用于普通HTML元素的transformation和transitions，都可以用于SVG元素上；但是，有些SVG属性不能通过CSS进行动画，只能使用SVG进行动画😏：</p><ul><li>比如，SVG路径（<code>path</code>），使用一组<code>数据</code>（<code>d=&quot;&quot;</code> 特性）定义路径形状。这些数据可以被SMIL修改和动画，但是不能使用CSS；</li><li>这是因为SVG元素被一组称之为SVG表现特性（<code>presentation attributes</code>） 的特性所描述；某些特性可以使用CSS进行设置，修改和添加动画效果，而有些特性是无法使用CSS进行修改或添加动画的😅</li></ul><p>📚 因此，现在很多动效是无法简单使用CSS完成的。CSS和SVG动效的空隙可以使用JS或者派生自SMIL规范的声明式SVG动画进行填补：</p><ul><li>如果你更喜欢JS的方式，推荐使用 <a href="http://snapsvg.io/" target="_blank" rel="noreferrer">snap.svg</a> 这个库，它被称为SVG版本的jQuery</li><li>如果你更喜欢声明式动画的方式，则可以使用本文介绍的动画元素</li></ul><p>SMIL方式比JS动画的一个优势是：JS无法对使用 <code>img</code> | <code>background-image</code> 方式引入的SVG资源进行控制，而SMIL动画则都可以，这也可以认为是SMIL的一个比较大的优势。本文的目的就是让你开始使用SMIL😁。</p><h2 id="_3️⃣-浏览器兼容性" tabindex="-1">3️⃣ 浏览器兼容性 <a class="header-anchor" href="#_3️⃣-浏览器兼容性" aria-hidden="true">#</a></h2><p>几乎没啥兼容性问题，除了IE和opera Mimi</p><ul><li><a href="https://caniuse.com/svg-smil" target="_blank" rel="noreferrer">svg smil - CANIUSE</a></li></ul><p>2022年11月08日17:16:26</p>',19),l=[n];function d(r,c,s,S,g,m){return o(),e("div",null,l)}const _=t(i,[["render",d]]);export{h as __pageData,_ as default};
